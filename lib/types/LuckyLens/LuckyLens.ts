/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LuckyLensInterface extends utils.Interface {
  functions: {
    "Raffles(uint256)": FunctionFragment;
    "chooseRandomWinner(uint256)": FunctionFragment;
    "getRandomNums(uint256[])": FunctionFragment;
    "getRequestStatus(uint256)": FunctionFragment;
    "isAfter(uint256)": FunctionFragment;
    "lastRequestId()": FunctionFragment;
    "newRaffleDrawNow(uint256,uint256)": FunctionFragment;
    "postRaffle(uint256,uint256,uint48)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "requestIdToRaffleId(uint256)": FunctionFragment;
    "requestIds(uint256)": FunctionFragment;
    "s_requests(uint256)": FunctionFragment;
    "timestamp()": FunctionFragment;
    "totalRaffles()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Raffles"
      | "chooseRandomWinner"
      | "getRandomNums"
      | "getRequestStatus"
      | "isAfter"
      | "lastRequestId"
      | "newRaffleDrawNow"
      | "postRaffle"
      | "rawFulfillRandomWords"
      | "requestIdToRaffleId"
      | "requestIds"
      | "s_requests"
      | "timestamp"
      | "totalRaffles"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Raffles",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseRandomWinner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNums",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAfter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newRaffleDrawNow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "postRaffle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIdToRaffleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_requests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRaffles",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "Raffles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chooseRandomWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNums",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAfter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newRaffleDrawNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postRaffle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestIdToRaffleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requestIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s_requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRaffles",
    data: BytesLike
  ): Result;

  events: {
    "PostRaffle(address,uint256,uint256,uint256,uint48)": EventFragment;
    "RequestFulfilled(uint256,uint256,uint256)": EventFragment;
    "RequestSent(uint256,uint256,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PostRaffle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export interface PostRaffleEventObject {
  owner: string;
  raffleId: BigNumber;
  profileId: BigNumber;
  pubId: BigNumber;
  time: number;
}
export type PostRaffleEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number],
  PostRaffleEventObject
>;

export type PostRaffleEventFilter = TypedEventFilter<PostRaffleEvent>;

export interface RequestFulfilledEventObject {
  raffleId: BigNumber;
  requestId: BigNumber;
  randomNum: BigNumber;
}
export type RequestFulfilledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RequestFulfilledEventObject
>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export interface RequestSentEventObject {
  raffleId: BigNumber;
  requestId: BigNumber;
  numWords: number;
}
export type RequestSentEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  RequestSentEventObject
>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface LuckyLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LuckyLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Raffles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, number, BigNumber] & {
        owner: string;
        profileId: BigNumber;
        pubId: BigNumber;
        time: number;
        randomNum: BigNumber;
      }
    >;

    chooseRandomWinner(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRandomNums(
      raffleIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRequestStatus(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber[]] & { fulfilled: boolean; randomWords: BigNumber[] }
    >;

    isAfter(
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    newRaffleDrawNow(
      profileId: PromiseOrValue<BigNumberish>,
      pubId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    postRaffle(
      profileId: PromiseOrValue<BigNumberish>,
      pubId: PromiseOrValue<BigNumberish>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestIdToRaffleId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    requestIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    s_requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { fulfilled: boolean; exists: boolean }>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRaffles(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  Raffles(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, number, BigNumber] & {
      owner: string;
      profileId: BigNumber;
      pubId: BigNumber;
      time: number;
      randomNum: BigNumber;
    }
  >;

  chooseRandomWinner(
    raffleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRandomNums(
    raffleIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRequestStatus(
    _requestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber[]] & { fulfilled: boolean; randomWords: BigNumber[] }
  >;

  isAfter(
    timeInSeconds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  newRaffleDrawNow(
    profileId: PromiseOrValue<BigNumberish>,
    pubId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  postRaffle(
    profileId: PromiseOrValue<BigNumberish>,
    pubId: PromiseOrValue<BigNumberish>,
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestIdToRaffleId(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  requestIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  s_requests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { fulfilled: boolean; exists: boolean }>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  totalRaffles(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Raffles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, number, BigNumber] & {
        owner: string;
        profileId: BigNumber;
        pubId: BigNumber;
        time: number;
        randomNum: BigNumber;
      }
    >;

    chooseRandomWinner(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRandomNums(
      raffleIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRequestStatus(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber[]] & { fulfilled: boolean; randomWords: BigNumber[] }
    >;

    isAfter(
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    newRaffleDrawNow(
      profileId: PromiseOrValue<BigNumberish>,
      pubId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    postRaffle(
      profileId: PromiseOrValue<BigNumberish>,
      pubId: PromiseOrValue<BigNumberish>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    requestIdToRaffleId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { fulfilled: boolean; exists: boolean }>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaffles(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PostRaffle(address,uint256,uint256,uint256,uint48)"(
      owner?: PromiseOrValue<string> | null,
      raffleId?: PromiseOrValue<BigNumberish> | null,
      profileId?: PromiseOrValue<BigNumberish> | null,
      pubId?: null,
      time?: null
    ): PostRaffleEventFilter;
    PostRaffle(
      owner?: PromiseOrValue<string> | null,
      raffleId?: PromiseOrValue<BigNumberish> | null,
      profileId?: PromiseOrValue<BigNumberish> | null,
      pubId?: null,
      time?: null
    ): PostRaffleEventFilter;

    "RequestFulfilled(uint256,uint256,uint256)"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      randomNum?: PromiseOrValue<BigNumberish> | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      randomNum?: PromiseOrValue<BigNumberish> | null
    ): RequestFulfilledEventFilter;

    "RequestSent(uint256,uint256,uint32)"(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      numWords?: null
    ): RequestSentEventFilter;
    RequestSent(
      raffleId?: PromiseOrValue<BigNumberish> | null,
      requestId?: PromiseOrValue<BigNumberish> | null,
      numWords?: null
    ): RequestSentEventFilter;
  };

  estimateGas: {
    Raffles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chooseRandomWinner(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRandomNums(
      raffleIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestStatus(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAfter(
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    newRaffleDrawNow(
      profileId: PromiseOrValue<BigNumberish>,
      pubId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    postRaffle(
      profileId: PromiseOrValue<BigNumberish>,
      pubId: PromiseOrValue<BigNumberish>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestIdToRaffleId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaffles(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Raffles(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chooseRandomWinner(
      raffleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRandomNums(
      raffleIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestStatus(
      _requestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAfter(
      timeInSeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newRaffleDrawNow(
      profileId: PromiseOrValue<BigNumberish>,
      pubId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    postRaffle(
      profileId: PromiseOrValue<BigNumberish>,
      pubId: PromiseOrValue<BigNumberish>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestIdToRaffleId(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRaffles(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
